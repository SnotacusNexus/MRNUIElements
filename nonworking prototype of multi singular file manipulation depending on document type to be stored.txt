<Page
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:MRNUIElements"
      xmlns:MRNNexus_Model="clr-namespace:MRNNexus_Model;assembly=MRNNexus_Model" x:Class="MRNUIElements.AnalogFileUploadPage"
      mc:Ignorable="d"
      Title="AnalogFileUploadPage" Height="606" Width="738">

	<Page.Resources>
		<CollectionViewSource x:Key="dTO_LU_ClaimDocumentTypeViewSource" d:DesignSource="{d:DesignInstance {x:Type MRNNexus_Model:DTO_LU_ClaimDocumentType}, CreateList=True}"/>
		<Image x:Key="imagesrc2">
			<Image.Source x:Uid="n">
				<BitmapImage  x:Name="jon" UriSource="C:\Users\Snotacus\Dropbox\MRNUIElements\MRNUIElements\ResourceFiles\RoofInspectionWizardBkgnd.png"></BitmapImage>
			</Image.Source>
		</Image>
	</Page.Resources>

	<Grid Margin="0,0,-1,0" DataContext="{StaticResource dTO_LU_ClaimDocumentTypeViewSource}">
		<!--<Button x:Name="SubmitBTN" Content="GetData" HorizontalAlignment="Left" Margin="362,385,0,0" VerticalAlignment="Top" Width="75" Click="SubmitBTN_Click"/>
		<DataGrid x:Name="dataGrid" AutoGenerateColumns ="false" HorizontalAlignment="Left" Margin="48,39,0,0" VerticalAlignment="Top" Height="234" Width="196">
			<DataGrid.Columns>
				<DataGridTextColumn x:Name="StartTime" Binding="{Binding StartTime}" Header="StartTime" />
				<DataGridTextColumn x:Name="EndTime" Binding="{Binding EndTime}" Header="Endtime" />
				<DataGridTextColumn x:Name="Note" Binding="{Binding Note}" Header="Note" />
				<DataGridTextColumn x:Name="AppointmentType" Binding="{Binding AppointmentType}" Header="AppointmentType" />
				<DataGridTextColumn x:Name="CustomerName" Binding="{Binding CustomerName}" Header="CustomerName" />
			</DataGrid.Columns>
		</DataGrid>-->
		

		<TextBox x:Name="TextFile" HorizontalAlignment="Left" Height="22" Margin="624,516,0,0" TextWrapping="Wrap" Text="" VerticalAlignment="Top" Width="105" Visibility="Hidden"/>
		<Button x:Name="BtnFileOpen" Content="_Browse ..." HorizontalAlignment="Left" Margin="656,518,0,0" VerticalAlignment="Top" Width="74" /><!--Click="BtnFileOpen_Click"-->
		<Button x:Name="getImage" Content="Get Image" HorizontalAlignment="Left" Margin="504,30,0,0" VerticalAlignment="Top" Width="74" Click="getImage_Click"/>
		<ComboBox x:Name="ClaimList" HorizontalAlignment="Left" Margin="112,61,0,0" VerticalAlignment="Top" Width="120" DataContext="{Binding}" ItemsSource="{Binding Mode=OneWay}" DisplayMemberPath="MRNNumber" DropDownClosed="ClaimList_DropDownClosed" GotFocus="ClaimList_GotFocus"/>
		<Canvas x:Name="canvas"  HorizontalAlignment="Left" Height="387" Margin="62,97,0,0" VerticalAlignment="Top" Width="556">
			<Image x:Name="image" Height="377" Width="546" Source="http://services.mrncontracting.com/" Stretch="UniformToFill"/>
			<TextBlock x:Name="TextOverlay" Height="45" Canvas.Left="0" TextWrapping="Wrap" Canvas.Bottom="0"  Panel.ZIndex="10" Width="{Binding ActualWidth, ElementName=canvas, Mode=OneWay}" />
		</Canvas>
		<Label x:Name="label" Content="Available Claims" HorizontalAlignment="Left" Margin="112,30,0,0" VerticalAlignment="Top" Width="120" Foreground="White"/>
		<ComboBox x:Name="AvailableDocuments" HorizontalAlignment="Left" Margin="454,61,0,0" VerticalAlignment="Top" Width="120" SelectedValuePath="ClaimDocumentType" ItemsSource="{Binding Mode=OneWay}" DisplayMemberPath="ClaimDocumentType" DropDownClosed="AvailableDocuments_DropDownClosed"/>
		<Label x:Name="label_Copy" Content="Available Document Types" HorizontalAlignment="Left" Margin="368,30,0,0" VerticalAlignment="Top" Width="120" Foreground="White"/>
		<TextBox x:Name="TextToOverlayPicture" HorizontalAlignment="Left" Height="27" Margin="173,511,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="381" TextChanged="TextToOverlayPicture_TextChanged"/>
		<Button x:Name="AddPicture" Content="_Add Document" HorizontalAlignment="Left" Margin="624,543,0,0" VerticalAlignment="Top" Width="106"/>
		<Button x:Name="SubmitBtn" Content="_Submit" HorizontalAlignment="Left" Height="30" Margin="656,483,0,0" VerticalAlignment="Top" Width="73" IsDefault="True" Click="SubmitBtn_Click"/>

	</Grid>
</Page>


*******************************************************************************************************************************************************************************************************************************************






















using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Forms;
using System.Drawing;
using System.Drawing.Imaging;
using System.Drawing.Drawing2D;
using System.Drawing.Text;

using System.IO;
using MRNNexus_Model;
using System.Globalization;

namespace MRNUIElements
{
	/// <summary>
	/// Interaction logic for AnalogFileUploadPage.xaml
	/// </summary>
	/// 

	public partial class AnalogFileUploadPage : Page
	{
		ServiceLayer s1 = ServiceLayer.getInstance();
		public BitmapImage bitmap = new BitmapImage();
		static Uri src = new Uri(@"/MRNUIElements;/ResourceFiles/RoofInspectionWizardBkgnd.png", UriKind.Relative);
		BitmapImage img = new BitmapImage(src);
		public List<string> FileList = new List<string>();
		Geometry _textGeometry = null;
		Geometry _textHighlightGeometry = null;
		string file = "";
		string FullFilePath = "";
		public System.Windows.Forms.OpenFileDialog fileDialog = new System.Windows.Forms.OpenFileDialog();

		int i = 0;
		public AnalogFileUploadPage()
		{
			InitializeComponent();
			this.ClaimList.ItemsSource = s1.ClaimsList;
			this.AvailableDocuments.ItemsSource = s1.ClaimDocTypes;
			System.Windows.MessageBox.Show("Select a claim to add items to.", "Pick a claim to add documents to.", MessageBoxButton.OK);
			ClaimList.Focus();
			if (!ClaimList.Focus())
				System.Windows.MessageBox.Show("Select a file to upload into the system.", "Pick a file to upload.", MessageBoxButton.OK);
			AvailableDocuments.Focus();
			img.UriSource = src;
		}
		private void LogOut(object sender, RoutedEventArgs e)
		{
			Login Page = new Login();
			this.NavigationService.Navigate(Page);
		}

		private void SubmitBtn_Click(object sender, RoutedEventArgs e)
		{
			//var onlyFileName = System.IO.Path.GetFileNameWithoutExtension(file);
			//if (AvailableDocuments.SelectedItem.ToString() == string.Empty || AvailableDocuments.SelectedItem.ToString() == null)
			//	onlyFileName = AvailableDocuments.SelectedItem.ToString();
			//onlyFileName = onlyFileName.Replace(" ", "_");

			UpdateImageText(FormatText(TextToOverlayPicture.Text, System.Windows.Media.Brushes.Cyan, new Typeface("Times New Roman")), FullFilePath, true);
		}

		private void BtnFileOpen_Click(object sender, RoutedEventArgs e)
		{

			PrepareFileOpenDialog(AvailableDocuments.Text);

		}

		private string[] PrepareFileOpenDialog(string DocumentToImport)
		{
			if (DocumentToImport != "InspectionPhotos")
				return fileDialog.FileNames;
			switch (DocumentToImport)
			{

				case "InspectionPhotos":
					{
						this.fileDialog.Multiselect = true;
						this.fileDialog.DefaultExt = ".png";
						this.fileDialog.Filter = "JPEG Files (*.jpeg)|*.jpeg|PNG (*.png)|*.png|JPG Files (*.jpg)|*.jpg|GIF Files(*gif)|*.gif";
						var onlyFileName = "";
						var result = fileDialog.ShowDialog();
						switch (result)
						{
							case System.Windows.Forms.DialogResult.OK:
								{
									return fileDialog.FileNames;
								}


						}
						return fileDialog.FileNames;
					}

				case "j":
				default:
					TextFile.Text = null;
					TextFile.ToolTip = null;
					return fileDialog.FileNames;
			}
		}
					
	

		

		async private void UploadFile(DTO_ClaimDocument documentUploadRequest)
		{







			await s1.AddClaimDocument(documentUploadRequest);

			//SAVING FILES TO DISK
			//string filename = fileDialog.FileName = @"newfile" + ext;

			//using (SaveFileDialog saveFileDialog1 = new SaveFileDialog())
			//{
			//    saveFileDialog1.FileName = filename;
			//    if (System.Windows.Forms.DialogResult.OK != saveFileDialog1.ShowDialog())
			//        return;
			//    System.IO.File.WriteAllBytes(saveFileDialog1.FileName,Convert.FromBase64String(s1.ClaimDocument.FileBytes));
			//}



		}

		async private void getImage_Click(object sender, RoutedEventArgs e)
		{


			await s1.GetClaimDocumentsByClaimID(new DTO_Claim
			{
				ClaimID = 30
			});

			bitmap.UriSource = new Uri((SelectFile(PrepareFileOpenDialog(AvailableDocuments.Text))), UriKind.Absolute);
		}


		public void WriteTextToImage(BitmapImage bitmap, string inputFile, FormattedText text, System.Windows.Point position, bool Save = false, Geometry _textGeometry = null, Geometry _textHighlightGeometry = null)
		{

			//	BitmapImage bitmap = new BitmapImage(new Uri(inputFile)); // inputFile must be absolute path
			DrawingVisual visual = new DrawingVisual();
			if (bitmap != null)
			{

				using (DrawingContext dc = visual.RenderOpen())
				{
					dc.DrawImage(bitmap, new Rect(0, 0, bitmap.PixelWidth, bitmap.PixelHeight));
					if (_textGeometry == null)
						dc.DrawText(text, position);
					else// System.Windows.Media.Pen(System.Windows.Media.Brushes.Black
						dc.DrawGeometry(System.Windows.Media.Brushes.DarkRed, new System.Windows.Media.Pen(System.Windows.Media.Brushes.Black, 2), _textGeometry);
					if (_textHighlightGeometry != null)
						dc.DrawGeometry(new System.Windows.Media.ImageBrush(new System.Windows.Controls.Image().Source = (ImageSource)new ImageSourceConverter().ConvertFromString("C:\\Users\\Snotacus\\Dropbox\\MRNUIElements\\MRNUIElements\\ResourceFiles\\RoofInspectionWizardBkgnd.png")), new System.Windows.Media.Pen(new System.Windows.Media.ImageBrush(new System.Windows.Controls.Image().Source = (ImageSource)new ImageSourceConverter().ConvertFromString("C:\\Users\\Snotacus\\Dropbox\\MRNUIElements\\MRNUIElements\\ResourceFiles\\RoofInspectionWizardBkgnd.png")), 2), _textHighlightGeometry);

				}

				RenderTargetBitmap target = new RenderTargetBitmap(bitmap.PixelWidth, bitmap.PixelHeight,
																   bitmap.DpiX, bitmap.DpiY, PixelFormats.Default);
				target.Render(visual);
				image.Source = target;
				if (Save)
				{
					string path = System.IO.Path.GetDirectoryName(inputFile);
					string filename = System.IO.Path.GetFileNameWithoutExtension(inputFile);
					string ext = System.IO.Path.GetExtension(inputFile);
					string outputFile = path + "\\" + filename + @"_TextAdded" + ext;
					DisplayVisual(target, outputFile, Save);
				}
			}
		}


		public void UpdateImageText(FormattedText text, string ImgPath = null, bool bSave = false)
		{

			WriteTextToImage(GetImage(ImgPath, true), ImgPath, text, new System.Windows.Point((bitmap.PixelWidth / 2) - (text.Width / 2), bitmap.PixelHeight - text.Height), bSave, _textGeometry);


		}


		private void TextToOverlayPicture_TextChanged(object sender, TextChangedEventArgs e)
		{
			//TextOverlay.Text = TextToOverlayPicture.Text;
			UpdateImageText(FormatText(TextToOverlayPicture.Text, System.Windows.Media.Brushes.Cyan, new Typeface("Times New Roman")), FullFilePath, false);

		}

		private FormattedText FormatText(string str, System.Windows.Media.Brush brush, Typeface tf)
		{

			FormattedText text = new FormattedText(
			str,
				CultureInfo.InvariantCulture,
				System.Windows.FlowDirection.LeftToRight,
				tf,
				70,
				brush);
			_textGeometry = text.BuildGeometry(new System.Windows.Point((bitmap.PixelWidth / 2) - (text.Width / 2), bitmap.PixelHeight - text.Height));
			_textHighlightGeometry = text.BuildHighlightGeometry(new System.Windows.Point((bitmap.PixelWidth / 2) - (text.Width / 2), bitmap.PixelHeight - text.Height));


			return text;
		}




		protected BitmapImage GetImage(string filetoshow = null, bool isUpdate = false)
		{


			if (bitmap != null && isUpdate)
			{
				image.Source = bitmap;
				return bitmap;
			}
			else
			{
				bitmap.BeginInit();
				if (filetoshow != null)
				{
					bitmap.UriSource = new Uri(filetoshow, UriKind.Absolute);
					image.Source = bitmap;

				}
				else
				{
					bitmap.UriSource = new Uri((SelectFile(PrepareFileOpenDialog(AvailableDocuments.Text))), UriKind.Absolute);
				}
				bitmap.EndInit();
				image.Source = bitmap;
				return bitmap;

			}

		}



		private string SelectFile(string[] strarg, int count = -1, bool cancel = false)
		{
			string filetodisplay = "";
	foreach (string s in this.fileDialog.FileNames)
	{
		FileList.Add(s);


		FullFilePath = s;

		var file = s;
		TextFile.Text = file;
		TextFile.ToolTip = file;
		string onlyFileName = System.IO.Path.GetFileNameWithoutExtension(file);
		if (AvailableDocuments.SelectedItem.ToString() != string.Empty || AvailableDocuments.SelectedItem.ToString() != null)
			onlyFileName = AvailableDocuments.SelectedItem.ToString();
		onlyFileName = onlyFileName.Replace(" ", "_");


		GetImage(FullFilePath);



		byte[] imageBytes = System.IO.File.ReadAllBytes(file);
		string ext = System.IO.Path.GetExtension(file);

		//	SaveTo(AddTextToImage(TextToOverlayPicture.Text, onlyFileName), onlyFileName + "TextAdded");      //Get Text overlay display pic rename image prepare for upload after modifications

		DTO_ClaimDocument documentUploadRequest = new DTO_ClaimDocument
		{
			FileBytes = Convert.ToBase64String(imageBytes),
			FileName = onlyFileName,
			FileExt = ext,
			ClaimID = int.Parse(ClaimList.Text),
			DocTypeID = AvailableDocuments.SelectedIndex,
			DocumentDate = DateTime.Today
		};
	}

	return filetodisplay;

		}



		private void DisplayVisual(RenderTargetBitmap target, string outputFile, bool Save = false)
		{
			BitmapEncoder encoder = null;

			switch (System.IO.Path.GetExtension(outputFile))
			{
				case ".png":
					encoder = new PngBitmapEncoder();
					break;
				// more encoders here

				case ".jpeg":
					encoder = new JpegBitmapEncoder();
					break;

				case ".jpg":
					encoder = new JpegBitmapEncoder();
					break;

				case ".bmp":
					encoder = new BmpBitmapEncoder();
					break;
				case ".wmp":
					encoder = new WmpBitmapEncoder();
					break;
				case ".tiff":
					encoder = new TiffBitmapEncoder();
					break;
				case ".gif":
					encoder = new GifBitmapEncoder();
					break;


			}
			if (encoder != null)
			{
				encoder.Frames.Add(BitmapFrame.Create(target));
				if (Save)
				{
					using (FileStream outputStream = new FileStream(outputFile, FileMode.Create))
					{
						encoder.Save(outputStream);

					}
				}

			}

		}

		private void ClaimList_DropDownClosed(object sender, EventArgs e)
		{
			if (ClaimList.SelectedIndex > -1)
			{
				AvailableDocuments.IsEnabled = true;
				AvailableDocuments.Focus();
			}
			else
			{
				System.Windows.Forms.MessageBox.Show("Select a claim to import file(s) into.", "Select a claim.", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Question);
				ClaimList.IsDropDownOpen = true;
			}
		}

		private void ClaimList_GotFocus(object sender, RoutedEventArgs e)
		{

			ClaimList.IsDropDownOpen = true;
		}

		async private void AvailableDocuments_DropDownClosed(object sender, EventArgs e)
		{

			await CheckForExistingDocument(AvailableDocuments.SelectedIndex + 1);


		

		}
		async private Task<bool> CheckForExistingDocument(int DocumentTypeID)
		{
			DTO_Claim claim = new DTO_Claim();
			claim.MRNNumber = ClaimList.SelectedItem.ToString();
			DTO_ClaimDocument claimdoc = new DTO_ClaimDocument();
			await s1.GetClaimDocumentsByClaimID(claim);
			List<DTO_ClaimDocument> doclist = new List<DTO_ClaimDocument>();
			foreach (DTO_ClaimDocument d in doclist)
			{
				if (d.DocTypeID.ToString() != (DocumentTypeID).ToString())
				{
					return true;
				}

			}
			return false;

		} 

	}

}







